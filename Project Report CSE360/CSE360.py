# -*- coding: utf-8 -*-
"""360.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1W1FrQk934NejrtfVd81vFHlWKKhIubDK
"""

import random
def countFreq(arr, n):
 
    mp = dict()

    for i in range(n):
        if arr[i] in mp.keys():
            mp[arr[i]] += 1
        else:
            mp[arr[i]] = 1
             

    for x in mp:
        print(x, " ", mp[x])
values = [str(random.randint(0, 999)) for _ in range(1000)]

with open("random_values.txt", "w") as f:
    f.writelines("\n".join(values))


class LRU:
    def __init__(self, block_size):
        self.block_size = block_size
        self.blocks = []
        self.block_map = {}
        self.hit = 0

    def get_block(self, block_num):
        if block_num in self.block_map:
            self.blocks.remove(block_num)
            self.blocks.insert(0, block_num)
            return self.block_map[block_num]
        return None

    def add_block(self, block_num, block):
        if block in self.block_map.values():
            self.hit += 1

        if len(self.blocks) == self.block_size:
            lru_block_num = self.blocks.pop()
            del self.block_map[lru_block_num]

        self.blocks.insert(0, block_num)
        self.block_map[block_num] = block

    def get_hit_count(self):
        print(self.hit)


from collections import deque

class FIFO:
    def __init__(self, block_size):
        self.block_size = block_size
        self.blocks = deque()
        self.block_map = {}
        self.hit = 0

    def get_block(self, block_num):
        if block_num in self.block_map:
            return self.block_map[block_num]
        return None

    def add_block(self, block_num, block):
        if block in self.block_map.values():
            self.hit += 1
        if len(self.blocks) == self.block_size:

            fifo_block_num = self.blocks.popleft()
            del self.block_map[fifo_block_num]

        self.blocks.append(block_num)
        self.block_map[block_num] = block

    def get_hit_count(self):
        print(self.hit)


# FIFO
F = FIFO(10)

file1 = open('random_values.txt', 'r')
Lines = file1.readlines()

count = 0
for i in Lines:
    x = int(i.strip())
    F.add_block(count, x)
    count+=1

print(F)
F.get_hit_count()

#LRU
values = [str(random.randint(0, 999)) for _ in range(1000)]
with open("random_values.txt", "w") as f:
    f.writelines("\n".join(values))
L = LRU(10)

file1 = open('random_values.txt', 'r')
Lines = file1.readlines()

count = 0
for i in Lines:
    x = int(i.strip())
    L.add_block(count, x)
    count+=1

L.get_hit_count()